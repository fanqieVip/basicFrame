//****************************************
//******** module模块的公共脚本配置 *********
//****************************************

import com.frame.basic.buildsrc.DependencyConfig
import com.frame.basic.buildsrc.ProjectBuildConfig

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion ProjectBuildConfig.compileSdkVersion
    buildToolsVersion ProjectBuildConfig.buildToolsVersion

    defaultConfig {
        minSdkVersion ProjectBuildConfig.minSdkVersion
        targetSdkVersion ProjectBuildConfig.targetSdkVersion
        versionCode ProjectBuildConfig.versionCode
        versionName ProjectBuildConfig.versionName
        testInstrumentationRunner DependencyConfig.AndroidX.AndroidJUnitRunner
        consumerProguardFiles "consumer-rules.pro"
        ndk {
            // 设置支持的SO库架构
            //abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                //排除debug文件夹下的所有文件
                exclude 'debug/**'
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.DEVELOP}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        alpha {
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.ALPHA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        beta {
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.BETA}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            buildConfigField "String", "VERSION_TYPE", "\"${ProjectBuildConfig.Version.RELEASE}\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding = true
        dataBinding = true
    }
    //打包时移除项目中的相关文件，不打入apk文件中,避免第三方包冲突
    packagingOptions {
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

kapt {
    arguments {
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    testImplementation DependencyConfig.Android.Junit
    androidTestImplementation DependencyConfig.AndroidX.TestExtJunit
    androidTestImplementation DependencyConfig.AndroidX.TestEspresso
    implementation DependencyConfig.JetPack.HiltCore

    kapt DependencyConfig.GitHub.AutoServiceAnnotations
    kapt DependencyConfig.JetPack.HiltApt
    kapt DependencyConfig.JetPack.HiltAndroidx
    kapt DependencyConfig.JetPack.LifecycleCompilerAPT
    kapt DependencyConfig.JetPack.RoomApt
    kapt project(":lib_base_apt")
}